{"version":3,"sources":["colors.js","hexToHSL.js","handlers.js","speech.js"],"names":["currWord","words","isDark","colorName","hex","substring","r","parseInt","getCurrWord","isValidWord","wordArray","check","forEach","element","aWord","toLowerCase","replace","console","log","hexToHSL","H","g","b","length","cmin","Math","min","cmax","max","delta","h","s","l","round","abs","toFixed","logWords","results","transcript","lastElement","bg","handleResult","split","colorSpan","document","querySelector","classList","add","body","style","backgroundColor","onMIDISuccess","midiAccess","inputs","input","values","onmidimessage","command","message","data","note","velocity","elements","Array","from","querySelectorAll","e","fontSize","animation","Promise","resolve","setTimeout","remove","onMIDIFailure","navigator","requestMIDIAccess","then","colorsEl","displayColors","Object","entries","map","w","c","join","start","window","SpeechRecognition","recognition","continuous","interimResults","onresult","webkitSpeechRecognition","mediaDevices","getUserMedia","audio","stream","catch","err","innerHTML"],"mappings":"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","file":"speech.933e95e9.js","sourceRoot":"..","sourcesContent":["/**\n * \n A slash of Blue—\n A sweep of Gray—\n Some scarlet patches on the way,\n Compose an Evening Sky—\n A little purple—slipped between—\n Some Ruby Trousers hurry on—\n A Wave of Gold—\n A Bank of Day—\n This just makes out the Morning Sky.\n\n -- Emily Dickinson\n\n */\n\n\nlet currWord = \"\";\n\nexport const words = {\n  'splash' : \"#0000FF\",\n  'blue' : \"#2C8C99\",\n  'sweep' : \"#b4c292\",\n  'grey' : \"#BCB8B1\",\n  'scarlet' : \"#e63946\",\n  'patches' : \"#EB6D1E\",\n  'way' : \"#F6BE9A\",\n  'compose' : \"#F6BE9A\",\n  'evening' : \"#8D73D3\",\n  'little' : \"#8064CE\",\n  'purple' : \"#613DC1\",\n  'slipped' : \"#E23C4A\",\n  'between' : \"#F9DC5C\",\n  'ruby' : \"#931621\",\n  'trousers' : \"#F5CF29\",\n  'hurry' : \"#ECC30B\",\n  'wave' : \"#F9DC5C\",\n  'gold' : \"#FFF275\",\n  'bank' : \"#181716\",\n  'day' : \"#162527\",\n  'this' : \"#0000FF\",\n  'just' : \"#0678ae\",\n  'makes' : \"#ae7676\",\n  'morning' : \"#787456\"\n};\n\nexport function isDark(colorName) {\n  const hex = words[colorName].substring(1, 7);\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  return r * 0.299 + g * 0.587 + b * 0.114 < 120;\n}\n\nexport function getCurrWord(){\n    return currWord;\n}\n\nexport function isValidWord(wordArray) {\n  // return !!words[word];\n  let check = false;\n  wordArray.forEach(element => {\n    let aWord = element.toLowerCase().replace(/\\s/g, \"\");\n    console.log(\"INSIDE VALID: \" + aWord);\n    if( !!words[aWord]){ check = true; currWord = aWord; }\n  });\n\n  return check;\n}\n\n","export function hexToHSL(H) {\n  // Convert hex to RGB first\n  let r = 0, g = 0, b = 0;\n  if (H.length == 4) {\n    r = \"0x\" + H[1] + H[1];\n    g = \"0x\" + H[2] + H[2];\n    b = \"0x\" + H[3] + H[3];\n  } else if (H.length == 7) {\n    r = \"0x\" + H[1] + H[2];\n    g = \"0x\" + H[3] + H[4];\n    b = \"0x\" + H[5] + H[6];\n  }\n  // Then to HSL\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  let cmin = Math.min(r,g,b),\n      cmax = Math.max(r,g,b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n\n  if (delta == 0)\n    h = 0;\n  else if (cmax == r)\n    h = ((g - b) / delta) % 6;\n  else if (cmax == g)\n    h = (b - r) / delta + 2;\n  else\n    h = (r - g) / delta + 4;\n\n  h = Math.round(h * 60);\n\n  if (h < 0)\n    h += 360;\n\n  l = (cmax + cmin) / 2;\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n\n  return h;\n}","import { isValidWord, words, getCurrWord } from \"./colors\";\nimport { hexToHSL } from './hexToHSL';\n\nfunction logWords(results) {\n  console.log(results[results.length - 1][0].transcript);\n}\n\nlet h = \"100\", s = '100%', l = '50%';\nlet bg = `hsl(${h},${s},${l})`;\nlet lastElement;\n\nexport function handleResult({ results }) {\n  logWords(results);\n  const sentance = results[results.length - 1][0].transcript;\n  // let aWord = sentance.toLowerCase().replace(/\\s/g, \"\");\n  let wordArray = sentance.split(' ');\n  if (!isValidWord(wordArray)) return;\n  let aWord = getCurrWord();\n  const colorSpan = document.querySelector(`.${aWord}`);\n  colorSpan.classList.add(\"got\");\n  lastElement = colorSpan;\n  h = hexToHSL(words[aWord])\n  bg = `hsl(${h},${s},${l})`\n  document.body.style.backgroundColor = bg;\n  // colorSpan.classList.remove(\"got\");\n  // console.log(aWord);\n}\n\nnavigator.requestMIDIAccess()\n  .then(onMIDISuccess, onMIDIFailure);\n\nfunction onMIDISuccess(midiAccess) {\n  console.log(midiAccess);\n\n  const inputs = midiAccess.inputs;\n  for (let input of midiAccess.inputs.values())\n    input.onmidimessage = async (message) => {\n      const command = message.data[0];\n      const note = message.data[1];\n      const velocity = (message.data.length > 2) ? message.data[2] : 0;\n      // console.log(command, note, velocity)\n      if (command === 176) {\n        switch (note) {\n          case 14:\n            s = velocity / 1.28 + \"%\";\n            bg = `hsl(${h},${s},${l})`\n            document.body.style.backgroundColor = bg;\n            break;\n          case 15:\n            l = velocity / 1.28 + \"%\";\n            bg = `hsl(${h},${s},${l})`\n            document.body.style.backgroundColor = bg;\n            break;\n          case 16:\n            const elements = Array.from(document.querySelectorAll(\".colors\"))\n            for (let e of elements) {\n              e.style.fontSize = `${velocity / 32.0}em`;\n            }\n            break;\n        }\n      }\n      if (command === 144) {\n        switch (note) {\n          case 36:\n            const elements = Array.from(document.querySelectorAll(\".colors\"))\n            for (let e of elements) {\n              e.style.animation = \"jump 0.2s ease-in-out 2 alternate-reverse\"\n              await new Promise(resolve => setTimeout(resolve, 200))\n            }\n            await new Promise(resolve => setTimeout(resolve, 1000))\n            for (let e of elements) {\n              e.style.animation = \"\"\n            }\n            break;\n          case 38:\n            lastElement.classList.remove(\"got\")\n            break;\n        }\n      }\n    };\n\n}\n\nfunction onMIDIFailure() {\n  console.log('Could not access your MIDI devices.');\n}\n","import { handleResult } from \"./handlers\";\nimport { words, isDark } from \"./colors\";\n\nconst colorsEl = document.querySelector(\".colors\");\n\nfunction displayColors(words) {\n  return Object.entries(words).map(\n    ([w, c]) =>\n      `<span class=\"colors ${w} ${isDark(w) ? 'dark' : ''}\" \n        style=\"background: ${c};\">${w}</span>`\n  ).join(\"\");\n}\n\n\nwindow.SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\n\n\nfunction start() {\n  if (!window.SpeechRecognition) {\n    console.log(\"Sorry your browser does not support speech reco. \");\n    return;\n  }\n  console.log(\"Starting...\");\n  const recognition = new SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.onresult = handleResult;\n  recognition.start();\n}\n\nnavigator.mediaDevices.getUserMedia({ audio: true })\n  .then(function (stream) {\n    console.log('You let me use your mic!')\n    start();\n  })\n  .catch(function (err) {\n    console.log('No mic for you!')\n  });\n\n\ncolorsEl.innerHTML = displayColors(words);\n"]}